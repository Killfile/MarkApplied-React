import React, { Component } from 'react';

class JsonEditor extends Component {
  constructor(props) {
    super(props);
    this.state = {
      value: this.getValueFromJson(),
      highlightedValue: '',
      isEditing: null
    };
  }

  // Extract value from JSON object based on path
  getValueFromJson() {
    const { jsonObject, path } = this.props;
    if (jsonObject && path) {
      try {
        const keys = path.split('.');
        return keys.reduce((acc, key) => acc?.[key], jsonObject) || '';
      } catch (error) {
        console.error('Error accessing path in JSON object:', error);
        return '';
      }
    }
    return '';
  }

  componentDidMount() {
    this.updateHighlight();
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevState.value !== this.state.value || prevProps.highlight !== this.props.highlight) {
      this.updateHighlight();
    }
  }

  updateHighlight() {
    const { value } = this.state;
    const { highlight } = this.props;

    if (!highlight || !value) {
      this.setState({ highlightedValue: [value] });
      return;
    }

    const highlightArray = highlight
    const filteredHighlightArray = highlightArray.filter(word => word.trim() !== ''); //Remove empty strings
    const escapedHighlightArray = filteredHighlightArray.map(word => word.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')); //Escape special chars (generated by magic)
    const regex = new RegExp(`(${escapedHighlightArray.join('|')})`, 'gi');
    //const regex = new RegExp(`(${highlightArray.join('|')})`, 'gi');
    const parts = value.split(regex);

    try {
      const highlightedElements = parts.map((part, index) =>
        highlightArray.some((word) => word.toLowerCase() === part.toLowerCase()) ? (
          <span key={index} className="highlight">
            {part}
          </span>
        ) : (
          part
        )
      );
      this.setState({ highlightedValue: highlightedElements });
    } catch (error) {
      console.error(`Couldn't highlight ${parts} using ${highlightArray}`);
    }
  }

  handleEdit = () => {
    this.setState({ isEditing: this.props.path });
  };

  handleChange = (event) => {
    this.setState({ value: event.target.value });
  };

  handleSave = () => {
    const { jsonObject, path, onUpdate } = this.props;
    const keys = path.split('.');
    const updatedJson = { ...jsonObject };
    let temp = updatedJson;

    keys.forEach((key, index) => {
      if (index === keys.length - 1) {
        temp[key] = this.state.value;
      } else {
        temp[key] = temp[key] || {};
        temp = temp[key];
      }
    });

    onUpdate(updatedJson);
    this.setState({ isEditing: null });
  };

  render() {
    const { value, highlightedValue, isEditing } = this.state;
    const { path } = this.props;
    const { multiline} = this.props;

    return (
      <span>
        {isEditing === path ? (
          <div>
            {multiline === true ? (
              <div>
                <div>
                  <textarea
                  value={value}
                  onChange={this.handleChange}
                  placeholder={`Edit ${path}`}
                  spellCheck={true}
                  className="text-input"
                  />
                </div>
                <button onClick={this.handleSave} className='material-button'>Save</button>
              </div>
            ):(
                <span>
              <input
                type="text"
                value={value}
                onChange={this.handleChange}
                placeholder={`Edit ${path}`}
                spellCheck={true}
                className="text-input"
              />
              <button onClick={this.handleSave} className='material-button'>Save</button>
              </span>
              )}
            
          </div>
        ) : (
          <span onClick={this.handleEdit}>{highlightedValue}</span>
        )}
      </span>
    );
  }
}

export default JsonEditor;